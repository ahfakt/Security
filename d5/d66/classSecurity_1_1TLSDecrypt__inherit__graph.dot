digraph "Security::TLSDecrypt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{Security::TLSDecrypt\n||+ TLSDecrypt & operator=(TLSDecrypt &&other) noexcept\l#  TLSDecrypt(SSL *ssl)\l# std::size_t readBytes(std::byte *dest, std::size_t size) override\l# virtual void wantSendData()=0\l# void recvData()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Stream::Input TLS decryptor."];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{Stream::TransformInput\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$db/d03/classStream_1_1TransformInput.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node3 [label="{Stream::Input\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$d7/d83/classStream_1_1Input.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node4 [label="{Security::TLS\n||+  TLS(Context const &ctx)\l+ TLS & operator=(TLS &&other) noexcept\l# void wantSendData() override\l# void wantRecvData() override\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d8/d26/classSecurity_1_1TLS.html",tooltip="Stream::Input / Stream::Output TLS decryptor and encryptor."];
}
