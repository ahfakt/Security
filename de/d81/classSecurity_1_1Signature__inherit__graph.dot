digraph "Security::Signature"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{Security::Signature\n||+  Signature(EVP_MD const *md, Key const &key)\l+  Signature(EVP_MD const *mdIn, Key const &verifyKey, EVP_MD const *mdOut, Key const &signKey)\l+ static std::vector\< std::byte \> Sign(void const *data, std::size_t count, EVP_MD const *md, Key const &signKey)\l+ static bool Verify(void const *data, std::size_t count, EVP_MD const *md, Key const &verifyKey, std::vector\< std::byte \> const &signature)\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Stream::Input / Stream::Output Signature observer."];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{Security::SignatureInput\n||+  SignatureInput(EVP_MD const *md, Key const &verifyKey)\l+  SignatureInput(SignatureInput &&other) noexcept\l+ SignatureInput & operator=(SignatureInput &&other) noexcept\l+ bool verifySignature(std::vector\< std::byte \> const &signature) const\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d6/d4d/classSecurity_1_1SignatureInput.html",tooltip="Stream::Input Signature observer."];
  Node3 -> Node2 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node3 [label="{Stream::TransparentInput\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$d1/dcd/classStream_1_1TransparentInput.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node4 [label="{Stream::Input\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$d7/d83/classStream_1_1Input.html",tooltip=" "];
  Node5 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node5 [label="{Security::SignatureOutput\n||+  SignatureOutput(EVP_MD const *md, Key const &signKey)\l+  SignatureOutput(SignatureOutput &&other) noexcept\l+ SignatureOutput & operator=(SignatureOutput &&other) noexcept\l+ std::size_t getSignatureSize() const\l+ std::vector\< std::byte \> getSignature() const\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d7/d5e/classSecurity_1_1SignatureOutput.html",tooltip="Stream::Output Signature observer."];
  Node6 -> Node5 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node6 [label="{Stream::TransparentOutput\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$d1/d52/classStream_1_1TransparentOutput.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node7 [label="{Stream::Output\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",URL="/tmp/build/x64/Release/Stream/tag.xml$df/dc2/classStream_1_1Output.html",tooltip=" "];
}
